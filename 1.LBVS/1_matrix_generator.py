# -*- coding: utf-8 -*-
"""1_matrix_generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fFiZEAX62l8sfcpg7QhNNMKFKcm_4R-L

# Install
"""

url = 'https://anaconda.org/rdkit/rdkit/2018.09.1.0/download/linux-64/rdkit-2018.09.1.0-py36h71b666b_1.tar.bz2'
!curl -L $url | tar xj lib
!mv lib/python3.6/site-packages/rdkit /usr/local/lib/python3.6/dist-packages/
x86 = '/usr/lib/x86_64-linux-gnu'
!mv lib/*.so.* $x86/
!ln -s $x86/libboost_python3-py36.so.1.65.1 $x86/libboost_python3.so.1.65.1
import sys
sys.path.append('/usr/local/lib/python3.6/dist-packages/')

from google.colab import drive
drive.mount('/content/drive')

"""# MAIN"""

from rdkit import Chem
from rdkit import DataStructs
from rdkit.Chem import MACCSkeys
import numpy as np
import pandas as pd

def get_matrix(smiles_file):
  with open(smiles_file) as in_file:
    
    matrix = []
    names = []
    for line in in_file:
      if '\t' in line:
        smiles = line.split('\t')[0].strip()
        name = line.split('\t')[1].strip()
      else:
        smiles = line.split(' ')[0].strip()
        name = line.split(' ')[1].strip()
      
      molecule = Chem.MolFromSmiles(smiles)
      if molecule is None:
        continue

      # Topological Fingerprints 2048 bits
      fp1 = Chem.RDKFingerprint(molecule)
      # MACCS Keys 167 bits
      fp2 = MACCSkeys.GenMACCSKeys(molecule)
      # Concatena fingerprints
      fp_final = list(fp1.ToBitString() + fp2.ToBitString())
      # tranforma em uma lista de inteiros
      matrix.append([int(x) for x in fp_final])
      names.append(name)
    
    df = pd.DataFrame(matrix, index=names)
    df.index.name = "name"
    return df

"""# CHARLES"""

## CHARLES ##
# Diretorio com arquivos ligantes e decoys
#dir_experiment = "LIT/TP53/"
dir_experiment = "LIT/ALDH1/" 
meu_drive = "/content/drive/My Drive/covid/" + dir_experiment
# Definindo caminho dos arquivos
ligand_smiles = meu_drive + "AID1030_active_T.smi"
decoy_smiles  = meu_drive + "AID1030_inactive_T.smi"

# Gerando matriz para ligantes
ligands_df = get_matrix(ligand_smiles)
ligands_df['class'] = 1
#ligands_df.to_csv("ligands_matrix.csv")

# Gerando matriz para decoys
decoys_df = get_matrix(decoy_smiles)
decoys_df['class'] = 0
#decoys_df.to_csv("decoys_matrix.csv")

# Concatenando matrizes
matrix = pd.concat([ligands_df, decoys_df])

# Salvando matriz no Drive
matrix.to_csv(meu_drive + 'train_set.csv')

